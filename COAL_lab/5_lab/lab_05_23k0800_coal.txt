Question 1:

INCLUDE Irvine32.inc

.data
val1 dword 8000
.code
main PROC
mov eax, 0
mov eax, val1
add eax, 1
call dumpregs
main ENDP

END main

Question 3:

INCLUDE Irvine32.inc

.data
array byte 61,43,11,52,25
arrayS byte 5 Dup(?)
.code
main PROC

mov al, [array +2]
mov arrayS, al
mov al, [array +4]
mov [arrayS +1], al
mov al, [array +1]
mov [arrayS +2], al
mov al, [array +3]
mov [arrayS +3], al
mov al, array
mov [arrayS +4], al

COMMENT @
If the array size is word or dword then in word, we will access the next elemen
by [array +2] and so on; for dword [array + 4] and so on
@

main ENDP

END main

Question 4:

INCLUDE Irvine32.inc

.data
arrayB byte 10,20,30 
arrayW word 150,250,350
arrayD dword 600,1200,1800
sum1 dword 0
sum2 dword 0
sum3 dword 0
.code
main PROC

mov eax, 0
mov eax, arrayD
movzx ebx, arrayW
add eax, ebx
movzx ebx, arrayB
add eax, ebx
mov sum1, eax

mov eax, 0
mov eax, [arrayD+4]
movzx ebx, [arrayW+2]
add eax, ebx
movzx ebx, [arrayB+1]
add eax, ebx
mov sum2, eax

mov eax, 0
mov eax, [arrayD+8]
movzx ebx, [arrayW+4]
add eax, ebx
movzx ebx, [arrayB+2]
add eax, ebx
mov sum3, eax


call dumpregs

main ENDP

END main

Question 5:

INCLUDE Irvine32.inc

.data
array1 byte 10,20,30,40
array2 byte 4 dup(?)


.code
main PROC

mov edi, offset [array1 + 3]
mov esi, offset array2

mov al, [esi]
mov [edi] , al
inc esi
dec edi

mov al, [esi]
mov [edi] , al
inc esi
dec edi

mov al, [esi]
mov [edi] , al
inc esi
dec edi

mov al, [esi]
mov [edi] , al
inc esi
dec edi

call dumpregs

main ENDP

END main

Question 6:

INCLUDE Irvine32.inc

.data
array dword 5,12,35,16,5
var sdword ?

.code
main PROC

mov esi, offset array

mov eax, 0
mov eax, [esi]
inc esi
sub eax, [esi]
inc esi
sub eax, [esi]
inc esi
sub eax, [esi]
inc esi
sub eax, [esi]
mov var, eax
call dumpregs

main ENDP

END main

Question 7:

INCLUDE Irvine32.inc

.data
arrayB byte 60,70,80
arrayW word 150,250,350
arrayD dword 600,1200,1800


.code
main PROC
mov eax, 0
mov esi, 0
mov eax, arrayD[esi * type arrayD]
mov esi, 2
add eax, arrayD[esi * type arrayD]

mov ax, 0
mov esi, 0
mov ax, arrayW[esi * type arrayW]
mov esi, 2
add ax, arrayW[esi * type arrayW]

mov al, 0
mov esi, 0
mov al, arrayB[esi * type arrayB]
mov esi, 2
add al, arrayB[esi * type arrayB]
call dumpregs

main ENDP

END main