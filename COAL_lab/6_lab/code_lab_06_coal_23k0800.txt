Task 1:
INCLUDE Irvine32.inc

.data

a byte 0

.code
main PROC
mov ecx, 8
mov ebx, 0
mov eax, 0
call WriteDec
call crlf

mov edx, 1
mov eax, edx
call WriteDec
call crlf
mov eax, 0

l1:
add eax, ebx 
add eax, edx
call WriteDec
call crlf
mov ebx, edx
mov edx, eax
mov eax, 0
loop l1
exit
main ENDP
END main

Task 2:
a:
INCLUDE Irvine32.inc

.data
count dword 3
.code
main PROC
mov ecx, 4
mov eax, 1
mov ebx, 0
l1:
mov ebx, ecx
mov ecx,4
sub ecx, count
l2:
call WriteDec
loop l2
call crlf
dec count
mov ecx, ebx
loop l1

exit
main ENDP
END main

B:

INCLUDE Irvine32.inc

.data
count dword 0
.code
main PROC
mov ecx, 4
mov eax, 1
mov ebx, 0
l1:
mov ebx, ecx
mov ecx,4
sub ecx, count
l2:
call WriteDec
loop l2
call crlf
inc count
mov ecx, ebx
loop l1

exit
main ENDP
END main

C:
INCLUDE Irvine32.inc

.data
count dword 0
.code
main PROC
mov ecx, 4
mov eax, ecx
mov ebx, 0
l1:
mov ebx, ecx
mov ecx,4
sub ecx, count
mov eax, 4
l2:
call WriteDec
dec eax
loop l2
call crlf
inc count
mov ecx, ebx
loop l1

exit
main ENDP
END main

D:

INCLUDE Irvine32.inc

.data
count dword 0
.code
main PROC
mov ecx, 4
mov ebx, 0
l1:
mov ebx, ecx
mov ecx,4
sub ecx, count
mov eax, 0
l2:
inc eax
call WriteDec
loop l2
call crlf
inc count
mov ecx, ebx
loop l1

exit
main ENDP
END main

Task 3:include irvine32.inc

.data
prompt1 BYTE "Enter ID: ", 0
prompt2 BYTE "Enter Name: ", 0
prompt3 BYTE "Enter Year Of Birth: ", 0
prompt4 BYTE "Enter Annual Salary: ", 0

prompt5 BYTE "ID: ", 0
prompt6 BYTE "Name: ", 0
prompt7 BYTE "Year Of Birth: ", 0
prompt8 BYTE "Annual Salary: ", 0
prompt9 BYTE "Total Salary: ", 0

id DWORD 5 DUP(?)
namearr BYTE 5 DUP(50 DUP(?))  
year DWORD 5 DUP(?)
salary DWORD 5 DUP(?)

loop1 DWORD ?

.code
main PROC
    mov ecx, 5
    mov esi, 0

L1:
    mov loop1, ecx
    
    mov edx, OFFSET prompt1
    call WriteString
    call ReadInt
    mov id[esi*4], eax

    mov edx, OFFSET prompt2
    call WriteString
    mov edi, esi
    mov eax, 100
    mul edi
    mov edx, OFFSET namearr
    add edx, eax
    mov ecx, 100
    call ReadString

    mov edx, OFFSET prompt3
    call WriteString
    call ReadInt
    mov year[esi*4], eax

    mov edx, OFFSET prompt4
    call WriteString
    call ReadInt
    mov salary[esi*4], eax

    inc esi
   mov ecx, loop1

 LOOP L1

mov ecx, 5
mov esi, 0
call crlf

l2:
    mov loop1 , ecx
    
    mov edx, OFFSET prompt5
    call WriteString
    mov eax, id[esi*4]
    call Writedec
    call crlf

    mov edx, OFFSET prompt6
    call WriteString
    mov edi, esi
    mov eax, 100
    mul edi
    mov edx, OFFSET namearr
    add edx, eax
    call WriteString
    call crlf

    mov edx, OFFSET prompt7
    call WriteString
    mov eax, year[esi*4]
    call Writedec
    call crlf

    mov edx, OFFSET prompt8
    call WriteString
    mov eax, salary[esi*4]
    call Writedec
    call crlf
    call crlf
    inc esi


    mov ecx, loop1
    dec ecx
    jnz l2
call crlf
mov edx, OFFSET prompt8
call WriteString
call crlf
mov ecx, 5
mov esi, 0
mov eax,0
l3:
    add eax,salary[esi*4]
    inc esi
    loop l3
call writedec
    exit
main ENDP
END mainTask 4:


INCLUDE Irvine32.inc

.data
Source byte "Mufeez",0
target byte 7 dup(0)


.code
main PROC
mov esi, 0
mov ecx, LENGTHOF Source
mov al, 0
l1:
mov al, Source[esi]
mov target[esi], al
inc esi
loop l1

mov edx, OFFSET Source
call writeString
mov edx, OFFSET target
call writeString


exit
main ENDP
END main

Task 5:


INCLUDE Irvine32.inc

.data

array byte 1,2,3,4,5,6,7,8,9
.code
main PROC
mov esi, OFFSET array
mov edi, OFFSET array
add edi, TYPE array * (LENGTHOF array -1)


l1:
cmp esi, edi
je done
mov al, [esi]
mov bh, [edi]
mov [esi], bh
mov [edi],al
add esi, TYPE array
sub edi, TYPE array
jmp l1

done:
mov esi, OFFSET array
mov ecx, LENGTHOF array
mov ebx, TYPE array
call DumpMem
exit
main ENDP
END main

Task 6:


INCLUDE Irvine32.inc

.data

array byte 8,5,1,2,6
.code
main PROC
mov esi, OFFSET array
mov edi, OFFSET array
mov ecx, LENGTHOF array
outer:
	mov eax, ecx
	mov ecx, (LENGTHOF array-1)
	add edi, TYPE array
	inner:
		mov bl, [esi]
		mov dl, [edi]
		cmp bl, dl
		jng noswap
		
		xchg bl, dl
		mov [esi], bl
		mov [edi], dl
	noswap:
		add esi, TYPE array
		add edi, TYPE array
		loop inner
	
	mov ecx, eax
	mov esi, OFFSET array
	mov edi, OFFSET array
	loop outer
mov esi, OFFSET array
mov ecx, LENGTHOF array
mov ebx, TYPE array
call DumpMem
exit
main ENDP
END main